01 - Objetivos da aula
PRÓXIMA ATIVIDADE

Nessa aula você vai aprender o que fazer quando seus cenários de testes exigem recursos que injetem informações específicas, exceções ou falhas. Com isso vai conhecer mais um padrão de simulação nos testes de integração.



02 - Lançando exceções
Transcrição
[00:00] No nosso teste do comando CadastraTarefa, nós só estamos testando o cenário feliz. E se tiver algum problema, aconteceu alguma exceção aqui na execução desse comando? De repente, o banco de dados fica fora do ar ou então algum problema de dado, enfim. Alguma exceção foi lançada na execução desse comando. Como é que nós temos que fazer?

[00:26] Eu perguntei para o cliente e o cliente falou o seguinte: quando isso acontecer, você tem que dizer que o resultado da execução desse comando falhou, deu algum tipo de problema. Então, você tem que dizer que o resultado agora foi bem-sucedido ou não foi bem-sucedido.

[00:51] Então eu preciso, a partir dessa nova pergunta: “o que eu tenho que fazer quando uma exceção acontece?”, fazer um redesign aqui na minha solução. Vamos começar fazendo um teste primeiro, e nós vamos ver como nós temos que fazer um design.

[01:08] Lembre-se daquele curso de teste unitário onde nós falamos que os nossos testes ajudam, antes de você escrever códigos de produção, no design da sua aplicação. Então, vamos usar essa prática: TDD. Vou criar um teste aqui, e vou colocar o nome dela como o seguinte "QuandoExceptionForLancadaResultadoIsSucessDeveSerFalse".

[02:11] Então eu já estou colocando aqui algumas coisas que eu estou pensando para o design. Então, eu vou copiar o começo desse cenário, só para nós termos um ponto de partida mais rápido. Então, eu estou criando uma tarefa, um comando que vai cadastrar uma tarefa. Configurei meu repositório, estou usando o repositório fake, nesse caso.

[02:58] Então, o design é o seguinte: eu tenho que ter agora um retorno para esse método. Nesse método, se eu apertar "F12" ele não tem retorno, void. Nesse caso, eu preciso mudar. Agora eu estou fazendo um novo design.

[03:09] Então, eu vou colocar: "var resultado = handler.Execute(comando)". E eu já vou falar qual é a classe, qual é o tipo, que vai ser uma classe chamada "ComandResult". Esse Command Result vai ter que ser retornado pelo meu execute aqui. E a minha verificação? A minha verificação vai ser "Assert.false(resultado.IsSucess)".

[03:47] Foi o que nós falamos ali: resultado e sucesso deve ser falso. Então, está aqui a verificação, o resultado desse tipo que nós ainda não criamos. Então, vamos continuar. Vamos criar esse cara. Esse Command Result faz parte do meu core. Pode fazer, mas pode fazer também do services. Eu não sei ainda onde é que eu vou colocar, mas vou deixar aqui. Vamos lá, vou deixar aqui e depois nós discutimos, se for o caso. Eu acho que não vai ter necessidade de nós discutirmos onde colocar essa classe por algum outro motivo.

[04:30] Então, esse cara possui uma propriedade booleana chamada is success. Eu não vou poder nem insertar ele. Ele vai ter um construtor que define se foi bem sucedido ou não. Então, já tem essa classe aqui. Ela já sendo reconhecida aqui, e na execução do meu CadastraTarefaHandler eu vou retornar esse Command Result aqui.

[05:13] Agora, já tenho compilação funcionando. Não, ainda não. Não está compilando ainda. Vou colocar aqui Return New Command Result True. Agora meu código vai passar a compilar, "Control + Shift + B". Vamos ver se está tudo certo. Não está. Está com erro, por quê? Qual é o erro? É no projeto web api.

[06:03] Não quero fazer a compilação do web api agora. Quero compilar o teste, tudo bem? O teste compilou. Não vou compilar a solução como um todo. Vou compilar só um teste, porque não está na hora de ver a questão do api. Então, se eu rodar esse novo teste, ele vai falhar usando a nossa prática tdd. Vai falhar porque eu estou esperando falso e ele vai retornar true.

[06:38] Então, o que é que eu vou fazer aqui agora? Nesse cara eu vou colocar um "try", "catch (Exeption e)". Nesse caso aqui, eu vou dar um "return new ComandResult(false)". E esse código todo aqui que está efetivamente persistindo a nossa tarefa, veio para dentro do try catch.

[07:15] Não vou mais fazer o lançamento. Eu não vou relançar a exceção, vou deixar aqui. Porém, não adiantou nada. Não adiantou nada, porque continuo com problemas no teste, pois ainda continua retornando true. Eu ainda não lancei a exceção, onde é que eu vou lançar essa exceção?

[07:40] Então repara aqui que nesse repositório fake, eu posso, no incluir tarefas, chegar aqui "throw new Exception("Houve um erro ao incluir as tarefas")". Estou lançando a exceção aqui. E quando eu executar agora o meu teste para ver a exceção, o teste está funcionando.

[08:26] Só que tem um problema, se eu executar esse teste aqui, eu acho que voltei a executar com repositório fake. E agora, eu tive um problema. Por quê? Eu estou chamando o repositório fake e o Cadastra Handler, no execute dele. Ele está chamando o Incluir Tarefas deste repositório fake que lança a exceção.

[09:03] Então, eu consegui inserir, lançar a exceção e testar a questão das exceções em um teste, mas eu quebrei outros testes. Então, vamos agora tentar ver o que é que eu posso fazer para configurar esse lançamento de exceção no meu setup, no meu arrange. Então eu quero que esse cenário aqui, especificamente, configure o lançamento da exceção e não no repositório.

[09:43] O repositório tem que continuar sem nenhum problema de lançamento de exceção. E outro detalhe: eu não quero usar o repositório fake, eu quero usar o nosso repositório normal, nosso repositório de tarefa aqui. Então, o repositório de tarefa que recebe o contexto.

[10:09] Ele está aqui. E esse aqui, também, vai usar o repositório tarefa. Eu preciso copiar novamente esse código aqui. Passar o repositório como argumento do construtor.

[10:42] Então, desse jeito aqui, eu estou usando agora o repositório de produção. Vou testar os meus dois aqui: um vai falhar e outro vai funcionar. Então, o que é que está acontecendo? Deixa eu testar esse cara aqui para não ter aquilo do agenciamento de prazos.

[11:08] O que está acontecendo aqui é que eu não estou lançando exceção no repositório de tarefa, e eu não posso lançar mesmo. Isso aqui é um código de produção. Eu tenho que fazer com que a exceção seja configurada, seja arranjada, nesse código. No código do cenário de teste. É o cenário de teste que vai ter que dizer "nesse momento eu vou lançar uma exceção". Como que eu faço isso?







03 - Setup da exceção
Transcrição
[00:00] Para nós configurarmos a exceção, justamente nesse cenário aqui, nós vamos começar a utilizar uma biblioteca que vai ser responsável por simular esses objetos no nosso lugar. Então, agora nós estamos criando esses objetos fake, o InMemoryDatabase e o próprio repositório fake. Nós estamos colocando esses objetos no cenário de teste. Nós vamos passar agora essa responsabilidade para a biblioteca. Essa biblioteca se chama Moq.

[00:32] E justamente essa biblioteca, além de possibilitar a criação desses objetos, também possibilita que você configure como esse objeto vai se comportar para cenários específicos. Então, é isso que nós queremos. Esse objeto que vai ser criado aqui pelo Moq, ele lança uma exceção quando o incluir tarefas for chamado.

[00:57] Então, eu vou instalar aqui essa biblioteca. A parte do NuGet. Moq, o nome dela é “m” “o” “q”. Vou instalar aqui, depois aceitar. Então agora eu já tenho esse cara aqui disponível para mim no projeto de teste. Vou aproveitar e importar logo aqui o namespace moq. E agora, vamos começar a usar esse cara.

[01:29] Então, como eu falei, eu não vou mais me responsabilizar por criar os objetos fake. Eu vou deixar para a biblioteca moq. Para esse cenário, especificamente. Em outros cenários, eu posso querer usar aquele objeto fake. É um exemplo do gerencia prazo. Eu estou criando uma massa de dados complexa aqui e eu quero usar o InMemoryDatabase, por que não?

[02:01] Mas para esse caso aqui, onde eu preciso configurar a exceção, eu vou passar a bola para o moq. Como é que funciona esse cara? Primeiro eu vou criar uma variável aqui que vai receber um objeto do tipo Mock " var mock = new Mock". E esse objeto do tipo moq, esse construtor, precisa de saber qual moq que ele vai fazer, para qual tipo.

[02:24] No caso nosso aqui, é o "iRepositórioTarefas". E, por fim, eu preciso pedir para o mock agora me dizer o seguinte: ""me dá um objeto que está sob sua responsabilidade". Então a propriedade object nos dá um objeto daquele tipo que foi mockado.

[02:50] Então, primeiro eu crio um objeto tipo mock para o tipo que eu quero mockar e depois eu pego um objeto desse tipo através da propriedade object. Entre essas duas situações, a criação e pegar o objeto, eu posso fazer as configurações que eu quiser. No nosso exemplo, eu vou fazer a configuração de lançamento da exceção.

[03:14] Então, como que eu faço isso? Eu vou falar o seguinte "mock.Setup(r => IncluirTarefas()).Throws(new Exception("Houve um erro na inclusão de tarefas")". Pronto.

[03:48] Então, eu estou configurando aqui como esse mock vai se comportar neste cenário. Tem mais uma última definição que eu preciso fazer aqui que é a seguinte: esse objeto, esse método de incluir tarefas, tem como argumento um array de tarefas. Então, eu preciso dizer para o meu mock que a exceção vai ser lançada para qualquer array de tarefas que for chamado.

[04:18] Eu faço isso através de uma estrutura que o próprio mock me dá, que é uma classe chamada "it". Essa classe tem um método chamado "It.IsAny<Tarefa[]>()))", e ele precisa perguntar qual é o tipo de objeto que eu vou obter. No caso, um array de tarefa.

[04:43] Então, a leitura dessa configuração aqui é a seguinte: "mock, faz um setup para quando o método "incluir tarefas" for chamado para qualquer argumento de entrada do tipo array de tarefas, você vai lançar uma exceção." Exceção do tipo exception, e o objeto é esse aqui: new exception.

[05:14] Configura. Configurou aqui, e a partir disso, eu pego o objeto e passo ele como argumento do meu executor. Nesse caso, de uso CadastraTarefasHandler. Agora, eu já tenho condição de testar. Vou aqui no meu testador, vamos no "quando exception for lançada".

[05:37] Então, vou executar este cara. E, agora, passou a funcionar. Ou seja, a exceção foi lançada. Vamos abrir aqui o execute. A exceção foi lançada no momento da inclusão da tarefa. E eu capturei essa exceção aqui. E retornei um Command Result com reach success falso. Ou seja, não foi bem sucedido a execução desse comando. E eu peguei isso na verificação, verifiquei aqui que era falso reach success.











04 - Erro no banco de dados
PRÓXIMA ATIVIDADE

Débora deseja simular o lançamento de uma exceção no cadastramento de uma tarefa. Para isso irá "mockar" um repositório de tarefas usando a biblioteca Moq (ela já instalou o pacote corretamente). Contudo está confusa com o código que deve escrever na linha com o comentário CODIGO 1 e na linha com o comentário CODIGO 2. Você pode ajudá-la?

Veja seu código a seguir:

[Fact]
public void QuandoLancarExcecaoIsSuccessDeveRetornarFalse()
{
    //arrange
    var comando = new CadastraTarefa("Estudar Xunit", new Categoria("Estudo"), new DateTime(2019, 12, 31));
    var mock = new Mock<IRepositorioTarefas>();
    //CODIGO 1
    var repo = //CODIGO 2 
    var handler = new CadastraTarefaHandler(repo);

    //act
    var resultado = handler.Execute(comando);

    //assert
    Assert.False(resultado.IsSuccess);
}COPIAR CÓDIGO
Selecione uma alternativa

Codigo 1:

mock.Throws(new Exception("Houve um erro na inclusão de tarefas"));
Código 2:

var repo = mock.Object;

Codigo 1:

mock.Setup(r => r.IncluirTarefas(It.IsAny<Tarefa[]>()))
    .Throws(new Exception("Houve um erro na inclusão de tarefas"));
Código 2:

var repo = mock.Object;

Codigo 1:

mock.Setup(r => r.IncluirTarefas(It.IsAny<Tarefa[]>()))
    .Throws(new Exception("Houve um erro na inclusão de tarefas"));
Código 2:

var repo = mock.CreateObject();









05 - Recapitulando
Transcrição
[00:00] Só para nós recapitularmos o que nós conversamos nessa terceira aula. Nós conhecemos mais um tipo do nosso dublês para testes. E esse tipo, é chamado de stub, stubs. Qual é a diferença desses stubs para esses outros caras aqui?

[00:18] No caso, o stub é aquele onde você precisa fornecer alguma informação de entrada, algum dado de entrada para o seu teste. O nosso exemplo foi justamente o lançamento de uma exceção. Então, eu precisei mockar um objeto, precisei simular um objeto e dizer que o comportamento dele para determinado método. No caso aqui, o incluir tarefas seria o lançamento de uma exceção.

[00:52] Então, quando acontecesse, quando o teste fosse executado, essa exceção iria ser lançada. Então, um stub, simula um objeto, um recurso que nós precisamos testar. Mas nós precisamos configurar algumas informações de entrada para sensibilizar o nosso cenário de teste, o nosso teste.

[01:16] Então essa é a diferença do stub. Olhando para o dummy, ele é um objeto que você cria, mas você não vai utilizar num evento qualquer. O fake é um objeto leve que você cria e ele vai ser utilizado do jeito que ele está, sem nenhum tipo de configuração. E o stub é isso: você cria um objeto, nós estamos agora usando agora aqui a biblioteca Mock para isso, e você configura umas informações que vão ser usadas para o teste.

[01:53] Então, a configuração se dá, no caso da biblioteca Mock, entre a criação do mock e a obtenção do objeto. E toda essa estrutura de mock é feito, é claro, na fase de arrange, na fase onde você define as pré-condições para o teste ser realizado.














06 - Faça como eu fiz na aula
PRÓXIMA ATIVIDADE

Chegou a hora de você fixar os conhecimentos apresentados nessa aula implementando todos os passos que realizei durante os vídeos.

Crie um teste para simular uma exceção lançada ao usar o banco de dados
Instale o pacote Moq para facilitar nossa vida na hora de simular o repositório e lançar a exceção
crie um objeto do tipo Mock, configurando quando a exceção será lançada através do método Setup()
obtenha o "mock" através da propriedade Object








07 - Projeto atual
PRÓXIMA ATIVIDADEs
Baixe o código com o que fizemos até aqui!
https://caelum-online-public.s3.amazonaws.com/1314-csharp-testes-integracao/03/testes-integracao.video3.2.zip







08 - O que aprendemos?
PRÓXIMA ATIVIDADE

Nessa aula você conheceu o padrão Stub, utilizado para injetar informações específicas nos cenários de testes. Para facilitar a configuração desses cenários você instalou e utilizou o framework Moq. Vamos conhecer mais essa biblioteca nas próximas aulas!